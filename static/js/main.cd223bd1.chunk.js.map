{"version":3,"sources":["api/Ray.ts","api/Particle.ts","api/Wall.ts","api/IonPainter.ts","components/Canvas/Canvas.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Ray","P5","position","angle","_p5","_position","_direction","this","p5","Vector","fromAngle","boundry","x1","a","x","y1","y","x2","b","y2","x3","y3","x4","y4","den","t","intersect","createVector","stroke","push","translate","line","pop","Particle","_rays","width","height","radians","set","mouseX","mouseY","boundrys","ray","closest","record","Infinity","intersection","intersects","distance","dist","Math","min","fill","ellipse","show","Wall","IonPainter","node","_walls","_particle","draw","background","track","look","index","random","createCanvas","windowWidth","windowHeight","_createWalls","Canvas","canvasContainer","document","getElementById","id","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd223bd1.chunk.js","sourcesContent":["import p5 from 'p5';\r\nimport { IonPainter } from './IonPainter';\r\nimport { Wall } from './Wall';\r\n\r\nexport class Ray {\r\n  private _p5: IonPainter;\r\n  private _position: p5.Vector;\r\n  private _direction: p5.Vector;\r\n\r\n  constructor (P5: IonPainter, position: p5.Vector, angle: number) {\r\n    this._p5 = P5;\r\n    this._position = position;\r\n    this._direction = p5.Vector.fromAngle(angle);\r\n  }\r\n\r\n  public intersects (boundry: Wall): p5.Vector {\r\n    const x1 = boundry.a.x;\r\n    const y1 = boundry.a.y;\r\n    const x2 = boundry.b.x;\r\n    const y2 = boundry.b.y;\r\n\r\n    const x3 = this._position.x;\r\n    const y3 = this._position.y;\r\n    const x4 = this._position.x + this._direction.x;\r\n    const y4 = this._position.y + this._direction.y;\r\n\r\n    const den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\r\n\r\n    if (!den) {\r\n      return;\r\n    }\r\n\r\n    const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den;\r\n    const u = - ((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / den;\r\n\r\n    if (t > 0 && t < 1 && u > 0) {\r\n      const intersect = this._p5.createVector();\r\n      intersect.x = x1 + t * (x2 - x1);\r\n      intersect.y = y1 + t * (y2 - y1);\r\n      return intersect;\r\n    }\r\n    return;\r\n  }\r\n\r\n  public show (): void {\r\n    this._p5.stroke(255);\r\n    this._p5.push();\r\n    this._p5.translate(this._position.x, this._position.y);\r\n    this._p5.line(0, 0, this._direction.x * 10, this._direction.y * 10);\r\n    this._p5.pop();\r\n  }\r\n}\r\n","import p5 from 'p5';\r\nimport { IonPainter } from './IonPainter';\r\nimport { Ray } from './Ray';\r\nimport { Wall } from './Wall';\r\n\r\nexport class Particle {\r\n  private _p5: IonPainter;\r\n  private _position: p5.Vector;\r\n  private _rays: Ray[];\r\n\r\n  constructor (P5: IonPainter) {\r\n    this._p5 = P5;\r\n    this._position = this._p5.createVector(this._p5.width / 2, this._p5.height / 2);\r\n    this._rays = [];\r\n\r\n    for (let a = 0; a < 360; a += 10) {\r\n      this._rays.push(new Ray(this._p5, this._position, this._p5.radians(a)));\r\n    }\r\n  }\r\n\r\n  public track (): void {\r\n    this._position.set(this._p5.mouseX, this._p5.mouseY);\r\n  }\r\n\r\n  public look (boundrys: Wall[]): void {\r\n    for (const ray of this._rays) {\r\n      let closest = null;\r\n      let record = Infinity;\r\n      for (const boundry of boundrys) {\r\n        const intersection = ray.intersects(boundry);\r\n        if (intersection) {\r\n          const distance = p5.Vector.dist(this._position, intersection);\r\n          if (distance < record) {\r\n            record = distance;\r\n            closest = intersection;\r\n          }\r\n          record = Math.min(distance, record);\r\n        }\r\n      }\r\n      if (closest) {\r\n        this._p5.line(this._position.x, this._position.y, closest.x, closest.y);\r\n      }\r\n    }\r\n  }\r\n\r\n  public show (): void {\r\n    this._p5.fill(255);\r\n    this._p5.ellipse(this._position.x, this._position.y, 4);\r\n    for (const ray of this._rays) {\r\n      ray.show();\r\n    }\r\n  }\r\n}\r\n","import p5 from 'p5';\r\nimport { IonPainter } from './IonPainter';\r\n\r\nexport class Wall {\r\n  private _p5: IonPainter;\r\n  public a: p5.Vector;\r\n  public b: p5.Vector;\r\n\r\n  constructor (P5: IonPainter, x1: number, y1: number, x2: number, y2: number) {\r\n    this._p5 = P5;\r\n    this.a = this._p5.createVector(x1, y1);\r\n    this.b = this._p5.createVector(x2, y2);\r\n  }\r\n\r\n  show (): void {\r\n    this._p5.stroke(255);\r\n    this._p5.line(this.a.x, this.a.y, this.b.x, this.b.y);\r\n  }\r\n}\r\n","import p5 from 'p5';\r\nimport { Particle } from './Particle';\r\nimport { Wall } from './Wall';\r\n\r\nexport class IonPainter extends p5 {\r\n\r\n  private _walls: Wall[];\r\n  private _particle: Particle;\r\n\r\n  constructor (node: HTMLElement) {\r\n    super(() => { /* empty */ }, node);\r\n    // TODO: inital walls - 4 outer walls of viewport\r\n    this._walls = [];\r\n  }\r\n\r\n  private _createWalls (): void {\r\n    for (let index = 0; index < 5; index++) {\r\n      const x1 = this.random(this.width);\r\n      const x2 = this.random(this.width);\r\n      const y1 = this.random(this.height);\r\n      const y2 = this.random(this.height);\r\n      this._walls[index] = new Wall(this, x1, x2, y1, y2);\r\n    }\r\n  }\r\n\r\n  public setup (): void {\r\n    this.createCanvas(this.windowWidth, this.windowHeight);\r\n    this._createWalls();\r\n    this._particle = new Particle(this);\r\n  }\r\n\r\n  public draw = () => {\r\n    this.background(0);\r\n    for (const wall of this._walls) {\r\n      wall.show();\r\n    }\r\n\r\n    this._particle.track();\r\n    this._particle.show();\r\n    this._particle.look(this._walls);\r\n  }\r\n\r\n  // placeholder method\r\n  public show (): void {\r\n    return;\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { IonPainter } from '../../api/IonPainter';\r\nimport './Canvas.css';\r\n\r\nexport class Canvas extends React.Component {\r\n  componentDidMount (): void {\r\n    const canvasContainer = document.getElementById('canvas-container');\r\n    const ionPainter = new IonPainter(canvasContainer);\r\n    ionPainter.show();\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    return (\r\n      <div id='canvas-container'></div>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { Canvas } from '../Canvas/Canvas';\r\nimport './App.css';\r\n\r\nexport class App extends React.Component {\r\n  render (): React.ReactNode {\r\n    return (\r\n      <div className='App'>\r\n        <Canvas />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line:no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line:no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line:no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line:no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line:no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister (): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        // tslint:disable-next-line:no-console\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './components/App/App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}